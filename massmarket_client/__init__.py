# SPDX-FileCopyrightText: 2025 Mass Labs
#
# SPDX-License-Identifier: MIT

"""
Mass Market Relay Client Package

A modular Python client for interacting with Mass Market relay services.
Provides shop management, order processing, and blockchain integration.
"""

from typing import Protocol, Any, Optional, List, Tuple

# Import the main client classes
from .client import RefactoredRelayClient as RelayClient
from .legacy_client import RelayClient as LegacyRelayClient

# Import exceptions that exist in utils
from .utils import RelayException, EnrollException

# Import Shop for the protocol
from massmarket.cbor import Shop

# Import types needed for protocol
import massmarket.cbor.listing as mass_listing
import massmarket.cbor.base_types as mass_base


class RelayClientProtocol(Protocol):
    """Protocol interface for both RelayClient and RefactoredRelayClient."""

    def register_shop(self, token_id: Optional[int] = None) -> int: ...
    def enroll_key_card(self) -> None: ...
    def login(self, subscribe: bool = True) -> None: ...
    def close(self) -> None: ...
    def handle_all(self) -> None: ...
    def create_shop_manifest(self) -> None: ...
    def subscribe_customer(self) -> None: ...
    def create_order(self, oid=None, wait=True) -> int: ...
    def add_to_order(
        self, order_id: Any, listing_id: Any, quantity: int, variations=None
    ) -> None: ...
    def commit_items(self, order_id: Any) -> None: ...
    def update_address_for_order(
        self, order_id: Any, invoice=None, shipping=None
    ) -> None: ...
    def choose_payment(self, order_id: Any, currency=None, payee=None) -> None: ...
    def create_listing(
        self,
        name: str,
        price: int,
        iid=None,
        wait=True,
        state=mass_listing.ListingViewState.PUBLISHED,
    ) -> int: ...
    def change_inventory(
        self, listing_id: int, change: int, variations=None
    ) -> None: ...
    def update_shop_manifest(
        self,
        add_currency: Optional[mass_base.ChainAddress] = None,
        remove_currency: Optional[mass_base.ChainAddress] = None,
        set_pricing_currency: Optional[mass_base.ChainAddress] = None,
        add_payee: Optional[mass_base.Payee] = None,
        remove_payee: Optional[mass_base.Payee] = None,
        add_region: Optional[Tuple[str, mass_base.ShippingRegion]] = None,
        remove_region: Optional[str] = None,
        wait: bool = True,
    ) -> None: ...
    def abandon_order(self, order_id: Any) -> None: ...
    def create_tag(self, name: str) -> Any: ...
    def add_to_tag(self, tag_name: str, listing_id: Any) -> None: ...
    def update_listing(
        self,
        listing_id: int,
        price: Optional[int | mass_base.Uint256] = None,
        title: Optional[str] = None,
        descr: Optional[str] = None,
        add_image: Optional[str] = None,
        remove_image: Optional[int] = None,
        state: Optional[mass_listing.ListingViewState] = None,
        add_option: Optional[Tuple[str, mass_listing.ListingOption]] = None,
        remove_option: Optional[str] = None,
        add_variation: Optional[
            Tuple[str, Tuple[str, mass_listing.ListingVariation]]
        ] = None,
        remove_variation: Optional[Tuple[str, str]] = None,
    ) -> Any: ...
    def start_batch(self) -> None: ...
    def flush_batch(self, wait: bool = True) -> Any: ...

    # Connection and subscription methods
    def connect(self) -> None: ...
    def subscribe(self, filters: List[Any]) -> None: ...
    def subscribe_visitor(self) -> None: ...
    def subscribe_order(self) -> None: ...
    def authenticate(self) -> None: ...

    def get_blob_upload_url(self) -> Any: ...
    def transact_with_retry(self, func: Any) -> Any: ...
    def check_tx(self, tx: Any) -> None: ...
    def _write_patch(self, **kwargs) -> Any: ...

    @property
    def logged_in(self) -> bool: ...
    @property
    def errors(self) -> int: ...
    @errors.setter
    def errors(self, value: int) -> None: ...
    @property
    def shop(self) -> Shop | None: ...
    @property
    def all_key_cards(self) -> dict: ...
    @property
    def account(self) -> Any: ...
    @account.setter
    def account(self, value: Any) -> None: ...
    @property
    def shopReg(self) -> Any: ...
    @property
    def shop_token_id(self) -> int: ...
    @shop_token_id.setter
    def shop_token_id(self, value: int) -> None: ...
    @property
    def expect_error(self) -> bool: ...
    @expect_error.setter
    def expect_error(self, value: bool) -> None: ...
    @property
    def w3(self) -> Any: ...
    @property
    def erc20Token(self) -> Any: ...
    @property
    def default_shipping_address(self) -> Any: ...
    @property
    def default_payee(self) -> Any: ...
    @property
    def default_currency(self) -> Any: ...
    @property
    def chain_id(self) -> int: ...
    @property
    def last_error(self) -> Any: ...
    @last_error.setter
    def last_error(self, value: Any) -> None: ...
    @property
    def debug(self) -> bool: ...
    @debug.setter
    def debug(self, value: bool) -> None: ...

    # Additional properties used in tests
    @property
    def outgoingRequests(self) -> dict: ...
    @property
    def own_key_card(self) -> Any: ...
    @property
    def payments(self) -> Any: ...


# Package version using setuptools_scm
try:
    from importlib.metadata import version

    __version__ = version("massmarket-client")
except ImportError:
    # Fallback for older Python versions
    from pkg_resources import get_distribution

    __version__ = get_distribution("massmarket-client").version
except Exception:
    # Fallback version
    __version__ = "unknown"

# Public API - only include what we know exists
__all__ = [
    "RelayClient",  # Main modern client (refactored)
    "LegacyRelayClient",  # Original monolithic client
    "RelayClientProtocol",  # Protocol interface for both clients
    "RelayException",  # Main relay exception
    "EnrollException",  # Key card enrollment exception
]
